name: Build

on: [push]

jobs:
  test:
    name: Run on macOS 11
    runs-on: macos-11.0

    strategy:
      fail-fast: true
      matrix:
        include:
          - scheme: "PactSwift-iOS"
            destination: "platform=iOS Simulator,name=iPhone 12 Pro"
          - scheme: "PactSwift-macOS"
            destination: "arch=x86_64"

    env:
      SCHEME: ${{ matrix.scheme }}
      DESTINATION: ${{ matrix.destination }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Prepare Tools
        run: |
          Scripts/prepare_build_tools

      - name: Run tests (Xcode)
        run: |
          set -o pipefail && xcodebuild clean test -project PactSwift.xcodeproj -scheme "$SCHEME" -destination "$DESTINATION" GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES | xcbeautify

  test_carthage:
    needs: [test]
    name: Test Carthage
    runs-on: macos-11.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Carthage build
        run: |
          echo "‚ö†Ô∏è Running 'carthage build' with a Xcode 12 workaround script - https://github.com/Carthage/Carthage/issues/3019#issuecomment-665136323"
          ./Scripts/carthage_xcode12 build --no-skip-current --platform "ios,macos,tvos"

  test_spm:
    name: Swift CLI build and test (SPM)
    runs-on: macos-11.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Prepare Tools
        run: |
          Scripts/prepare_build_tools

      - name: Build binary && swift test
        run: |
          echo "üë∑‚Äç‚ôÄÔ∏è running swift build -c debug"
          set -o pipefail && swift build -c debug | xcbeautify
          echo "üß™ running swift test"
          set -o pipefail && swift test -Xlinker -L${{ env.RUST_BINARY_DIR }} | xcbeautify

  after_success:
    needs: [test, test_carthage, test_spm]
    name: Build demo projects
    runs-on: macos-11.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build demo projects
        run: |
          curl -X POST https://api.github.com/repos/surpher/pact-swift-examples/dispatches -H 'Accept: application/vnd.github.everest-preview+json' -u ${{ secrets.PACT_SWIFT_TOKEN }} --data '{"event_type":"PactSwift - ${{ github.event.head_commit.message }}"}'
